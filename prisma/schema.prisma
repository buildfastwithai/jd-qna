// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model SkillRecord {
  id             String    @id @default(uuid())
  jobTitle       String
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  skills         Skill[]
  questions      Question[]
  interviewLength Int?     // Interview length in minutes
  rawJobDescription String? @db.Text // Raw job description text
  globalFeedback GlobalFeedback?
}

model Skill {
  id           String       @id @default(uuid())
  name         String
  level        SkillLevel   @default(INTERMEDIATE)
  requirement  Requirement  @default(OPTIONAL)
  numQuestions Int          @default(0)
  difficulty   String?      
  recordId     String
  record       SkillRecord  @relation(fields: [recordId], references: [id], onDelete: Cascade)
  questions    Question[]
  feedbacks    Feedback[]
  priority     Int?         // Priority order for sequencing questions
  category     SkillCategory? @default(TECHNICAL)
  questionFormat String?    @default("Scenario based")
  
  @@unique([name, recordId])
}

model Question {
  id           String       @id @default(uuid())
  content      String
  skillId      String
  skill        Skill        @relation(fields: [skillId], references: [id], onDelete: Cascade)
  recordId     String
  record       SkillRecord  @relation(fields: [recordId], references: [id], onDelete: Cascade)
  liked        LikeStatus?  @default(NONE)
  feedback     String?      @db.Text
}

model Feedback {
  id           String       @id @default(uuid())
  content      String
  skillId      String
  skill        Skill        @relation(fields: [skillId], references: [id], onDelete: Cascade)
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
}

model GlobalFeedback {
  id           String       @id @default(uuid())
  content      String       @db.Text
  recordId     String       @unique
  record       SkillRecord  @relation(fields: [recordId], references: [id], onDelete: Cascade)
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
}

enum SkillLevel {
  BEGINNER
  INTERMEDIATE
  PROFESSIONAL
  EXPERT
}

enum Requirement {
  MANDATORY
  OPTIONAL
}

enum LikeStatus {
  LIKED
  DISLIKED
  NONE
}

enum SkillCategory {
  TECHNICAL
  FUNCTIONAL
  BEHAVIORAL
  COGNITIVE
}
