generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model SkillRecord {
  id                String             @id @default(uuid())
  jobTitle          String
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  reqId             Int?
  userId            Int?
  interviewLength   Int?
  rawJobDescription String?
  roundId           Int?
  excelQuestionSets ExcelQuestionSet[]
  globalFeedback    GlobalFeedback?
  questions         Question[]
  regenerations     Regeneration[]
  skills            Skill[]
}

model Skill {
  id             String         @id @default(uuid())
  floCareerId    Int?
  name           String
  level          SkillLevel     @default(INTERMEDIATE)
  requirement    Requirement    @default(OPTIONAL)
  numQuestions   Int            @default(0)
  difficulty     String?
  recordId       String
  priority       Int?
  category       SkillCategory? @default(TECHNICAL)
  questionFormat String?        @default("Scenario based")
  deleted        Boolean        @default(false)
  feedbacks      Feedback[]
  questions      Question[]
  regenerations  Regeneration[]
  record         SkillRecord    @relation(fields: [recordId], references: [id], onDelete: Cascade)
}

model Question {
  id              String         @id @default(uuid())
  floCareerId     Int?
  content         String
  skillId         String
  recordId        String
  liked           LikeStatus?    @default(NONE)
  feedback        String?
  coding          Boolean        @default(false)
  deleted         Boolean        @default(false)
  deletedFeedback String?
  floCareerPoolId Int?
  record          SkillRecord    @relation(fields: [recordId], references: [id], onDelete: Cascade)
  skill           Skill          @relation(fields: [skillId], references: [id], onDelete: Cascade)
  regeneratedFrom Regeneration[] @relation("RegeneratedQuestion")
  regenerations   Regeneration[] @relation("OriginalQuestion")
}

model Feedback {
  id        String   @id @default(uuid())
  content   String
  skillId   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  skill     Skill    @relation(fields: [skillId], references: [id], onDelete: Cascade)
}

model GlobalFeedback {
  id        String      @id @default(uuid())
  content   String
  recordId  String      @unique
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  record    SkillRecord @relation(fields: [recordId], references: [id], onDelete: Cascade)
}

model Regeneration {
  id                 String      @id @default(uuid())
  originalQuestionId String
  newQuestionId      String
  reason             String?
  userFeedback       String?
  liked              LikeStatus? @default(NONE)
  skillId            String
  recordId           String
  createdAt          DateTime    @default(now())
  updatedAt          DateTime    @updatedAt
  newQuestion        Question    @relation("RegeneratedQuestion", fields: [newQuestionId], references: [id], onDelete: Cascade)
  originalQuestion   Question    @relation("OriginalQuestion", fields: [originalQuestionId], references: [id], onDelete: Cascade)
  record             SkillRecord @relation(fields: [recordId], references: [id], onDelete: Cascade)
  skill              Skill       @relation(fields: [skillId], references: [id], onDelete: Cascade)

  @@unique([originalQuestionId, newQuestionId])
}

model ExcelQuestionSet {
  id                String          @id @default(uuid())
  jobTitle          String
  experienceRange   String          @default("8 to 10 years")
  totalQuestions    Int
  skillsExtracted   String[]
  recordId          String?
  rawJobDescription String
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  questions         ExcelQuestion[]
  record            SkillRecord?    @relation(fields: [recordId], references: [id], onDelete: Cascade)
}

model ExcelQuestion {
  id                  String           @id @default(uuid())
  slNo                Int
  skill               String
  questionTitle       String
  questionDescription String
  idealAnswer         String
  coding              Boolean          @default(false)
  setId               String
  createdAt           DateTime         @default(now())
  updatedAt           DateTime         @updatedAt
  set                 ExcelQuestionSet @relation(fields: [setId], references: [id], onDelete: Cascade)
}

enum SkillLevel {
  BEGINNER
  INTERMEDIATE
  PROFESSIONAL
  EXPERT
}

enum Requirement {
  MANDATORY
  OPTIONAL
}

enum LikeStatus {
  LIKED
  DISLIKED
  NONE
}

enum SkillCategory {
  TECHNICAL
  FUNCTIONAL
  BEHAVIORAL
  COGNITIVE
}
